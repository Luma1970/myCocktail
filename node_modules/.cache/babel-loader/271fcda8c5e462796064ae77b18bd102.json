{"ast":null,"code":"var _jsxFileName = \"/Users/Dream/Documents/Dev/Progetti/react-projects/15-cocktails/setup/src/context.js\";\nimport React, { useState, useContext, useEffect } from 'react';\nimport { useCallback } from 'react';\nconst url = 'https://www.thecocktaildb.com/api/json/v1/1/search.php?s=';\nconst AppContext = React.createContext();\n\nconst AppProvider = ({\n  children\n}) => {\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState('a');\n  const [cocktails, setCocktails] = useState([]);\n\n  const fetchDrinks = async () => {\n    setLoading(true);\n\n    try {\n      const response = await fetch(`${url}${searchTerm}`);\n      const data = await response.json();\n      const {\n        drinks\n      } = data;\n\n      if (drinks) {\n        // destrutturo le proprietà all'interno del DB dell'API vedere url\n        const newCocktails = drinks.map(drink => {\n          const {\n            idDrink,\n            strDrink,\n            strCategory,\n            strAlcoholic,\n            strGlass,\n            strInstructions,\n            strDrinkThumb,\n            strIngredient1,\n            strIngredient2,\n            strIngredient3,\n            strIngredient4,\n            strIngredient5,\n            strIngredient6,\n            strIngredient7,\n            strIngredient8,\n            strIngredient9,\n            strIngredient10,\n            strIngredient11,\n            strIngredient12,\n            strIngredient13,\n            strIngredient14,\n            strIngredient15,\n            strMeasure1,\n            strMeasure2,\n            strMeasure3,\n            strMeasure4,\n            strMeasure5,\n            strMeasure6,\n            strMeasure7,\n            strMeasure8,\n            strMeasure9,\n            strMeasure10,\n            strMeasure11,\n            strMeasure12,\n            strMeasure13,\n            strMeasure14,\n            strMeasure15\n          } = drink;\n          return {\n            id: idDrink,\n            name: strDrink,\n            image: strDrinkThumb,\n            category: strCategory,\n            info: strAlcoholic,\n            glass: strGlass,\n            instruction: strInstructions,\n            ingredients: strIngredient1,\n            strIngredient2,\n            strIngredient3,\n            strIngredient4,\n            strIngredient5,\n            strIngredient6,\n            strIngredient7,\n            strIngredient8,\n            strIngredient9,\n            strIngredient10,\n            strIngredient11,\n            strIngredient12,\n            strIngredient13,\n            strIngredient14,\n            strIngredient15,\n            measures: strMeasure1,\n            strMeasure2,\n            strMeasure3,\n            strMeasure4,\n            strMeasure5,\n            strMeasure6,\n            strMeasure7,\n            strMeasure8,\n            strMeasure9,\n            strMeasure10,\n            strMeasure11,\n            strMeasure12,\n            strMeasure13,\n            strMeasure14,\n            strMeasure15\n          };\n        });\n        setCocktails(newCocktails);\n      } else {\n        setCocktails([]);\n      }\n\n      setLoading(false);\n    } catch (error) {\n      console.log(error);\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchDrinks();\n  }, [searchTerm]);\n  return /*#__PURE__*/React.createElement(AppContext.Provider, {\n    value: {\n      loading,\n      cocktails,\n      setSearchTerm\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 3\n    }\n  }, children);\n}; // make sure use\n\n\nexport const useGlobalContext = () => {\n  return useContext(AppContext);\n};\nexport { AppContext, AppProvider };","map":{"version":3,"sources":["/Users/Dream/Documents/Dev/Progetti/react-projects/15-cocktails/setup/src/context.js"],"names":["React","useState","useContext","useEffect","useCallback","url","AppContext","createContext","AppProvider","children","loading","setLoading","searchTerm","setSearchTerm","cocktails","setCocktails","fetchDrinks","response","fetch","data","json","drinks","newCocktails","map","drink","idDrink","strDrink","strCategory","strAlcoholic","strGlass","strInstructions","strDrinkThumb","strIngredient1","strIngredient2","strIngredient3","strIngredient4","strIngredient5","strIngredient6","strIngredient7","strIngredient8","strIngredient9","strIngredient10","strIngredient11","strIngredient12","strIngredient13","strIngredient14","strIngredient15","strMeasure1","strMeasure2","strMeasure3","strMeasure4","strMeasure5","strMeasure6","strMeasure7","strMeasure8","strMeasure9","strMeasure10","strMeasure11","strMeasure12","strMeasure13","strMeasure14","strMeasure15","id","name","image","category","info","glass","instruction","ingredients","measures","error","console","log","useGlobalContext"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect } from 'react'\nimport { useCallback } from 'react'\n\nconst url = 'https://www.thecocktaildb.com/api/json/v1/1/search.php?s='\nconst AppContext = React.createContext()\n\nconst AppProvider = ({ children }) => {\n  const [loading, setLoading] = useState(true)\n  const [searchTerm, setSearchTerm] = useState('a')\n  const [cocktails, setCocktails] = useState([])\n\n  const fetchDrinks = async () => {\n    setLoading(true)\n    try {\n      const response = await fetch(`${url}${searchTerm}`)\n      const data = await response.json()\n      const { drinks } = data\n      if (drinks) { // destrutturo le proprietà all'interno del DB dell'API vedere url\n        const newCocktails = drinks.map((drink) => {\n          const {\n            idDrink,\n            strDrink,\n            strCategory,\n            strAlcoholic,\n            strGlass,\n            strInstructions,\n            strDrinkThumb,\n            strIngredient1, strIngredient2, strIngredient3, strIngredient4, strIngredient5, strIngredient6, strIngredient7, strIngredient8, strIngredient9, strIngredient10, strIngredient11, strIngredient12, strIngredient13, strIngredient14, strIngredient15,\n            strMeasure1, strMeasure2, strMeasure3, strMeasure4, strMeasure5, strMeasure6, strMeasure7, strMeasure8, strMeasure9, strMeasure10, strMeasure11, strMeasure12, strMeasure13, strMeasure14, strMeasure15\n          } = drink\n          return {\n            id: idDrink,\n            name: strDrink,\n            image: strDrinkThumb,\n            category: strCategory,\n            info: strAlcoholic,\n            glass: strGlass,\n            instruction: strInstructions,\n            ingredients: strIngredient1, strIngredient2, strIngredient3, strIngredient4, strIngredient5, strIngredient6, strIngredient7, strIngredient8, strIngredient9, strIngredient10, strIngredient11, strIngredient12, strIngredient13, strIngredient14, strIngredient15,\n            measures: strMeasure1, strMeasure2, strMeasure3, strMeasure4, strMeasure5, strMeasure6, strMeasure7, strMeasure8, strMeasure9, strMeasure10, strMeasure11, strMeasure12, strMeasure13, strMeasure14, strMeasure15,\n          }\n        })\n        setCocktails(newCocktails)\n      } else {\n        setCocktails([])\n      }\n      setLoading(false)\n    } catch (error) {\n      console.log(error);\n      setLoading(false)\n    }\n  }\n  useEffect(() => {\n    fetchDrinks()\n  },[searchTerm])\n\n  return (\n  <AppContext.Provider\n    value={{\n      loading,\n      cocktails,\n      setSearchTerm,\n    }}\n  >\n    {children}</AppContext.Provider>)\n}\n// make sure use\nexport const useGlobalContext = () => {\n  return useContext(AppContext)\n}\n\nexport { AppContext, AppProvider }\n"]},"metadata":{},"sourceType":"module"}